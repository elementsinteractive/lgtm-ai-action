name: "LGTM AI Code Review"
description: "AI-powered code reviewer for pull requests"
author: "Elements Interactive"

branding:
  icon: "search"
  color: "blue"

inputs:
  ai-api-key:
    description: "API key for AI service (OpenAI, Anthropic, Google, etc.)"
    required: true

  git-api-key:
    description: "API key for GitHub (you can use GITHUB_TOKEN)"
    required: true

  pr-number:
    description: "Pull request number to review"
    required: true

  model:
    description: "AI model to use (e.g. gpt-5, claude-sonnet-4-0, gemini-2.5-flash)"
    required: false

  version:
    description: "LGTM AI version (latest, v0.7.2, etc.)"
    required: false
    default: "latest"

  publish:
    description: "Whether to publish the review as PR comments"
    required: false
    default: "true"

  exclude:
    description: "Space-separated file patterns to exclude (e.g. '*.md *.json package-lock.json')"
    required: false
    default: ""

  config:
    description: "Path to lgtm.toml configuration file (e.g. '.lgtm.toml')"
    required: false
    default: ""

  output-format:
    description: "Output format for the review (pretty, json, markdown)"
    required: false
    default: ""

  verbose:
    description: "Enable extra verbose output (-vv instead of -v)"
    required: false
    default: "false"

  issues_platform:
    description: "Issues platform to use (github, gitlab, jira)"
    required: false
    default: ""

  issues_url:
    description: "Base URL for the issues location."
    required: false
    default: ""

  issues_api_key:
    description: "API key for the issues platform. If issues options are set, but this is not provided, the git-api-key will be used instead."
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Run LGTM AI Review
      shell: bash
      run: |
        # Build arguments as an array for safety (avoids word-splitting issues)
        ARGS=(
          review
          --git-api-key "${{ inputs.git-api-key }}"
          --ai-api-key "${{ inputs.ai-api-key }}"
        )

        # Optional flags
        if [ -n "${{ inputs.model }}" ]; then
          ARGS+=(--model "${{ inputs.model }}")
        fi

        if [ "${{ inputs.publish }}" = "true" ]; then
          ARGS+=(--publish)
        fi

        if [ -n "${{ inputs.exclude }}" ]; then
          # Split exclude patterns and add each as a separate --exclude flag
          IFS=' ' read -ra EXCLUDE_PATTERNS <<< "${{ inputs.exclude }}"
          for pattern in "${EXCLUDE_PATTERNS[@]}"; do
            if [ -n "$pattern" ]; then
              ARGS+=(--exclude "$pattern")
            fi
          done
        fi

        if [ -n "${{ inputs.config }}" ]; then
          ARGS+=(--config "${{ inputs.config }}")
        fi

        if [ -n "${{ inputs.output-format }}" ]; then
          ARGS+=(--output-format "${{ inputs.output-format }}")
        fi

        # Verbose mode (default -v, or -vv if verbose=true)
        if [ "${{ inputs.verbose }}" = "true" ]; then
          ARGS+=(-vv)
        else
          ARGS+=(-v)
        fi

        # Issues integration
        if [ -n "${{ inputs.issues_platform }}" ]; then
          ARGS+=(--issues-platform "${{ inputs.issues_platform }}")
        fi

        if [ -n "${{ inputs.issues_url }}" ]; then
          ARGS+=(--issues-url "${{ inputs.issues_url }}")
        fi

        if [ -n "${{ inputs.issues_api_key }}" ]; then
          ARGS+=(--issues-api-key "${{ inputs.issues_api_key }}")
        fi

        docker run --rm \
          -v "${{ github.workspace }}:/workspace" \
          -w /workspace \
          elementsinteractive/lgtm-ai:${{ inputs.version }} \
          "${ARGS[@]}" \
          "https://github.com/${{ github.repository }}/pull/${{ inputs.pr-number }}"
